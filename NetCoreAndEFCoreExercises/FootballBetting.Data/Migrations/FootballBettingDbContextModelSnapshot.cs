// <auto-generated />
using FootballBetting.Data;
using FootballBetting.Models.Enum;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FootballBetting.Data.Migrations
{
    [DbContext(typeof(FootballBettingDbContext))]
    partial class FootballBettingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FootballBetting.Models.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BetTime");

                    b.Property<decimal>("Money");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("FootballBetting.Models.BetGame", b =>
                {
                    b.Property<int>("BetId");

                    b.Property<int>("GameId");

                    b.Property<int>("ResultPredictionId");

                    b.HasKey("BetId", "GameId");

                    b.HasIndex("GameId");

                    b.HasIndex("ResultPredictionId");

                    b.ToTable("BetGames");
                });

            modelBuilder.Entity("FootballBetting.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("FootballBetting.Models.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("FootballBetting.Models.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Continent");
                });

            modelBuilder.Entity("FootballBetting.Models.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3);

                    b.Property<int>("ContinentId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FootballBetting.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AwayGoals");

                    b.Property<double>("AwayTeamBetRate");

                    b.Property<int>("AwayTeamId");

                    b.Property<int>("CompetitionId");

                    b.Property<double>("DrawBetRate");

                    b.Property<DateTime>("GameTime");

                    b.Property<int>("HomeGoals");

                    b.Property<double>("HomeTeamBetRate");

                    b.Property<int>("HomeTeamId");

                    b.Property<int>("RoundId");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("RoundId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("FootballBetting.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsInjured");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PositionId");

                    b.Property<string>("PositionId1");

                    b.Property<int>("SquadNumber");

                    b.Property<int>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("PositionId1");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FootballBetting.Models.PlayerStatistic", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("PlayerId");

                    b.Property<int>("Assists");

                    b.Property<int>("Goals");

                    b.Property<int>("MinutesPlayed");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("FootballBetting.Models.Position", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("FootballBetting.Models.ResultPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Prediction");

                    b.HasKey("Id");

                    b.ToTable("ResultPredictions");
                });

            modelBuilder.Entity("FootballBetting.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("FootballBetting.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Budget");

                    b.Property<string>("Initials")
                        .HasMaxLength(3);

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PrimaryKitColorId");

                    b.Property<int?>("SecondaryKitColorId");

                    b.Property<int>("TownId");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryKitColorId");

                    b.HasIndex("SecondaryKitColorId");

                    b.HasIndex("TownId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FootballBetting.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("FootballBetting.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FootballBetting.Models.Bet", b =>
                {
                    b.HasOne("FootballBetting.Models.User", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.Models.BetGame", b =>
                {
                    b.HasOne("FootballBetting.Models.Bet", "Bet")
                        .WithMany("BetGames")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballBetting.Models.Game", "Game")
                        .WithMany("Bets")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballBetting.Models.ResultPrediction", "ResultPrediction")
                        .WithMany("BetGames")
                        .HasForeignKey("ResultPredictionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.Models.Country", b =>
                {
                    b.HasOne("FootballBetting.Models.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.Models.Game", b =>
                {
                    b.HasOne("FootballBetting.Models.Team", "AwayTeam")
                        .WithMany("AwayTeams")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballBetting.Models.Competition", "Competition")
                        .WithMany("Games")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballBetting.Models.Team", "HomeTeam")
                        .WithMany("Hometeams")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballBetting.Models.Round", "Round")
                        .WithMany("Games")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.Models.Player", b =>
                {
                    b.HasOne("FootballBetting.Models.Position", "Position")
                        .WithMany("Players")
                        .HasForeignKey("PositionId1");

                    b.HasOne("FootballBetting.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.Models.PlayerStatistic", b =>
                {
                    b.HasOne("FootballBetting.Models.Game", "Game")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballBetting.Models.Player", "Player")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.Models.Team", b =>
                {
                    b.HasOne("FootballBetting.Models.Color", "PrimaryKitColor")
                        .WithMany("PrimaryKitColors")
                        .HasForeignKey("PrimaryKitColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballBetting.Models.Color", "SecondaryKitColor")
                        .WithMany("SecondaryKitColors")
                        .HasForeignKey("SecondaryKitColorId");

                    b.HasOne("FootballBetting.Models.Town", "Town")
                        .WithMany("Teams")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.Models.Town", b =>
                {
                    b.HasOne("FootballBetting.Models.Country", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId");
                });
#pragma warning restore 612, 618
        }
    }
}
